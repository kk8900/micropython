# 工作流名称
name: ESP32 MicroPython Build

# 触发条件配置
on:
  # 允许手动触发工作流
  workflow_dispatch:
  
  # 代码推送时触发
  push:
    # 所有分支都触发
    branches:
      - '**'
    # 只有以下路径变更时才触发
    paths:
      - 'src/**'              # 源代码目录
      - '.github/workflows/*.yml'  # 工作流文件自身
      - 'boards/**'           # 开发板定义文件
    # 忽略以v开头的标签推送
    tags-ignore:
      - 'v*'
  
  # Pull Request 时触发
  pull_request:
    # 只在master分支的PR触发
    branches:
      - master
    # 只有以下路径变更时才触发
    paths:
      - 'src/**'
      - '.github/workflows/*.yml'

# 并发控制配置
concurrency:
  # 同一工作流+同一分支只运行一个实例
  group: ${{ github.workflow }}-${{ github.ref }}
  # 新的运行会取消正在进行的运行
  cancel-in-progress: true

# 全局环境变量
env:
  MICROPYTHON_DIR: ~/micropython    # MicroPython 源码目录
  ESP_IDF_DIR: ~/esp-idf            # ESP-IDF 目录
  ARTIFACTS_DIR: ~/artifacts        # 构建产物目录
  MPY_VERSION: v1.25.0              # 使用的 MicroPython 版本
  ESP_IDF_VERSION: v5.4.1           # 使用的 ESP-IDF 版本

# 工作定义
jobs:
  # 环境设置任务
  setup-environment:
    # 使用 Ubuntu 24.04 运行环境
    runs-on: ubuntu-24.04
    
    steps:
      # 步骤1：检查是否有可用的缓存
      - name: Cache ESP-IDF and MicroPython
        id: cache_esp_idf          # 步骤ID，用于后续引用
        uses: actions/cache@v4     # 使用缓存动作
        with:
          lookup-only: true        # 只检查不恢复
          # 缓存路径配置
          path: |
            ${{ env.ESP_IDF_DIR }}    # ESP-IDF 目录
            ~/.espressif/             # ESP工具链目录
            ~/.cache/pip/             # Python包缓存
            ${{ env.MICROPYTHON_DIR }} # MicroPython目录
          # 缓存键
          key: mpy-${{ env.MPY_VERSION }}-idf-${{ env.ESP_IDF_VERSION }}
          # 备用缓存键
          restore-keys: |
            mpy-${{ env.MPY_VERSION }}-idf-
            mpy-

      # 步骤2：安装系统依赖（缓存未命中时执行）
      - name: Install dependencies (if not cached)
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          # 安装编译工具链
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

      # 步骤3：克隆 MicroPython 源码（缓存未命中时执行）
      - name: Clone MicroPython specific version (if not cached)
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'
        run: |
          cd ~
          # 克隆指定版本的 MicroPython
          git clone --depth 1 --branch ${{ env.MPY_VERSION }} https://github.com/micropython/micropython.git ${{ env.MICROPYTHON_DIR }}
          cd ${{ env.MICROPYTHON_DIR }}
          # 初始化子模块
          git submodule update --init --depth 1
          # 编译 mpy-cross 工具
          cd mpy-cross && make

      # 步骤4：设置 ESP-IDF（缓存未命中时执行）
      - name: Set up ESP-IDF specific version (if not cached)
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'
        run: |
          cd ~
          # 克隆指定版本的 ESP-IDF
          git clone --depth 1 --branch ${{ env.ESP_IDF_VERSION }} https://github.com/espressif/esp-idf.git ${{ env.ESP_IDF_DIR }}
          # 初始化子模块（优化：只克隆必要的子模块）
          git -C ${{ env.ESP_IDF_DIR }} submodule update --init --recursive --filter=tree:0
          # 安装 ESP32、ESP32-S3 和 ESP32-C3 的工具链
          cd ${{ env.ESP_IDF_DIR }} && ./install.sh esp32,esp32s3,esp32c3
          # 设置环境变量
          source ./export.sh

  # 构建任务（依赖环境设置任务）
  build:
    needs: setup-environment
    runs-on: ubuntu-24.04
    
    # 构建策略配置
    strategy:
      fail-fast: false  # 一个配置失败不影响其他配置
      # 矩阵配置：定义不同的构建变体
      matrix:
        config:
          # ESP32-S3 开发板配置
          - { board: "ESP32_GENERIC_S3", variant: "SPIRAM_OCT", flash_size: "16" }
          # ESP32-C3 开发板配置
          - { board: "ESP32_GENERIC_C3", variant: "", flash_size: "8" }
          # ESP32 开发板配置
          - { board: "ESP32_GENERIC", variant: "SPIRAM", flash_size: "4" }

    steps:
      # 步骤1：恢复缓存（这次实际恢复文件）
      - name: Cache ESP-IDF and MicroPython
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ESP_IDF_DIR }}
            ~/.espressif/
            ~/.cache/pip/
            ${{ env.MICROPYTHON_DIR }}
          key: mpy-${{ env.MPY_VERSION }}-idf-${{ env.ESP_IDF_VERSION }}
          restore-keys: |
            mpy-${{ env.MPY_VERSION }}-idf-
            mpy-

      # 步骤2：检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 递归初始化子模块

      # 步骤3：构建 MicroPython
      - name: Build MicroPython
        run: |
          # 设置 ESP-IDF 环境变量
          source ${{ env.ESP_IDF_DIR }}/export.sh
          cd ${{ github.workspace }}/boards/
          
          # 构建基础命令
          IDF_CMD="idf.py -D MICROPY_DIR=${{ env.MICROPYTHON_DIR }} -D MICROPY_BOARD=${{ matrix.config.board }} -B build-${{ matrix.config.board }}"
          
          # 如果 variant 不为空，添加到构建命令
          if [ -n "${{ matrix.config.variant }}" ]; then
              IDF_CMD="$IDF_CMD -D MICROPY_BOARD_VARIANT=${{ matrix.config.variant }}"
          fi
          
          # 添加 flash size 参数
          IDF_CMD="$IDF_CMD -D MICROPY_FLASH_SIZE=${{ matrix.config.flash_size }}MB"
          
          # 执行构建命令
          eval "$IDF_CMD build"

          # 生成固件镜像
          cd build-${{ matrix.config.board }}
          python ${{ env.MICROPYTHON_DIR }}/ports/esp32/makeimg.py sdkconfig bootloader/bootloader.bin partition_table/partition-table.bin micropython.bin firmware.bin micropython.uf2
          
          # 准备产物目录
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          # 重命名固件文件（包含板子信息和配置）
          mv firmware.bin ${{ env.ARTIFACTS_DIR }}/firmware-${{ matrix.config.board }}-${{ matrix.config.variant }}-${{ matrix.config.flash_size }}MB.bin

      # 步骤4：上传构建产物
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          # 产物名称包含板子信息和配置
          name: firmware-${{ matrix.config.board }}-${{ matrix.config.variant }}-${{ matrix.config.flash_size }}MB
          # 产物路径
          path: ${{ env.ARTIFACTS_DIR }}/firmware-${{ matrix.config.board }}-${{ matrix.config.variant }}-${{ matrix.config.flash_size }}MB.bin
          # 保留天数
          retention-days: 5

      # 步骤5：构建失败时上传日志（仅在失败时执行）
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.config.board }}
          path: |
            ${{ github.workspace }}/boards/build-${{ matrix.config.board }}/log/
          retention-days: 5