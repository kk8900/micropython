name: ESP32 MicroPython Build

on:
  workflow_dispatch:
  push:
    branches: ['**']
    paths:
      - 'ports/esp32/**'
      - '.github/workflows/*.yml'
    tags-ignore: ['v*']
  pull_request:
    branches: [master]
    paths:
      - 'ports/esp32/**'
      - '.github/workflows/*.yml'

env:
  MICROPYTHON_DIR: ${{ github.workspace }}  # 关键修改1：直接使用工作区路径
  ESP_IDF_DIR: ~/esp-idf
  ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
  MPY_VERSION: v1.25.0
  ESP_IDF_VERSION: v5.4.1

jobs:
  setup-environment:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git wget flex bison gperf \
            python3 python3-pip python3-venv \
            cmake ninja-build ccache \
            libffi-dev libssl-dev dfu-util libusb-1.0-0

      - name: Set up ESP-IDF
        run: |
          git clone --depth 1 --branch ${{ env.ESP_IDF_VERSION }} \
            https://github.com/espressif/esp-idf.git ${{ env.ESP_IDF_DIR }}
          cd ${{ env.ESP_IDF_DIR }}
          ./install.sh esp32,esp32s3,esp32c3
          source ./export.sh

  build:
    needs: setup-environment
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        config:
          - { board: "ESP32_GENERIC_S3", variant: "SPIRAM_OCT", flash_size: "16" }
          - { board: "ESP32_GENERIC_C3", variant: "", flash_size: "8" }
          - { board: "ESP32_GENERIC", variant: "SPIRAM", flash_size: "4" }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build MicroPython
        run: |
          source ${{ env.ESP_IDF_DIR }}/export.sh
          
          # 关键修改2：确保进入正确的构建目录
          cd ${{ env.MICROPYTHON_DIR }}/ports/esp32
          echo "当前工作目录: $(pwd)"
          echo "目录内容:"
          ls -l
          
          # 动态生成构建目录名称
          BUILD_DIR="build-${{ matrix.config.board }}"
          [ -n "${{ matrix.config.variant }}" ] && BUILD_DIR="${BUILD_DIR}-${{ matrix.config.variant }}"
          
          # 构建命令
          IDF_CMD="idf.py \
            -D MICROPY_BOARD=${{ matrix.config.board }} \
            -D MICROPY_FLASH_SIZE=${{ matrix.config.flash_size }}MB \
            -B $BUILD_DIR"
            
          [ -n "${{ matrix.config.variant }}" ] && IDF_CMD="$IDF_CMD -D MICROPY_BOARD_VARIANT=${{ matrix.config.variant }}"
          
          echo "执行命令: $IDF_CMD"
          eval "$IDF_CMD build"

          # 生成固件
          cd $BUILD_DIR
          python ../makeimg.py \
            sdkconfig \
            bootloader/bootloader.bin \
            partition_table/partition-table.bin \
            micropython.bin \
            firmware.bin \
            micropython.uf2
            
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          mv firmware.bin ${{ env.ARTIFACTS_DIR }}/firmware-${{ matrix.config.board }}${{ matrix.config.variant && '-' }}${matrix.config.variant}-${{ matrix.config.flash_size }}MB.bin
